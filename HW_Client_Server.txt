HW
Client_Server
1) Прочитать про клиент-серверную архитектуру
Основная идея архитектуры «клиент-сервер» состоит в разделении сетевого приложения на несколько компонентов, каждый из которых 
реализует специфический набор сервисов. Компоненты такого приложения могут выполняться на разных компьютерах, выполняя серверные 
и/или клиентские функции. Это позволяет повысить надежность,  безопасность и производительность сетевых приложений и сети в целом.

Клиент - то ПО которое установлено на машине пользователя.
Сервер - компьютер, на котором хранится само приложение. Код, вся бизнес-логика и прочие доп.материалы.
БД - хранилище данных.
Клиент и сервер представляет собой некое программного обеспечение, в котором сетевая нагрузка распределена между поставщиками услуг (серверами) и заказчиками услуг (клиентами).
Взаимодействие осуществляется посредством сетевого протокола (самый распространненый тип HTTP/HTTPS, о них будет рассказано ниже). Используется запросы (request) и ответы (response). 
Клиент серверная архитектура может быть двухуровневой, трехуровневой и многоуровневой. Двухуровневая, в ней учавствует только клиент и сервер. Трехуровневая, в ней добавляется сервер базы данных.
Многоуровневая включает в себя множество участников (т.е. несколько серверов / несколько баз данных или все вместе).
Примеры клиентов - браузер (если речь идет о web), office (если речь о десктопе).

Виды клиентов:
Тонкий клиент - программа, которая переносит большую часть задач по обработке информации на сервер (Например браузер, в котором открыто приложение, он-лайн игра);
Толстый клиент - это такое приложение, которое обрабатывает всю основную логику самостоятельно, на локальной машине. На сервер могут передаваться только запросы к БД. (Например 1С бухгалтерия).
Преимущества клиент серверной архитектуры - безопасность, отсутствует дублирование кода (т.е. разгружаются машины пользователей, снижая требования к ним).
Недостатки - Высокая стоимость оборудования.

Если один из компонентов (сервер или БД) не работает, выходит из строя вся цепочка. В связи с этим, если приложение высоконагруженное (соц.сеть, банковское ПО) ставятся 
кластеры серверов и балансировщик, который определяет наименее загруженный сервер (или тот, что остался рабочим) и направляет на него запрос. 
Различают две схемы:
- горячий резерв, о нем сказано выше (сервера или БД работают в параллель);
- холодный резерв (когда сервер или БД являются резервными, и подключается когда основной выходит из строя).
Это помогает устранить основной недостаток - когда упало одно звено и в итоге лежит вся система.

2) Что ткое HTTP и HTTPS
HTTP (HyperText Transfer Protocol) - Протокол передачи данных в интернете. С его помощью браузер получает
информацию от сервера и показывает пользователю контент. Это первый протокол, который создали для работы 
в веб-пространстве.
HTTPS (от англ. HyperText Transfer Protocol Secure) - это защищеный протокол передачи данных в интернете.
Это тот же протокол HTTP, но защищенный SSL-сертификатом:
- Domain Validation (DV) - проверка в упрощенном виде (подтверждение права на пользование доменом)
- Organization Validation (OV) - кроме подтверждение права на пользование доменом, подтверждается фактическое существование организации
- Extended Validation (EV) - к перечисленным выше факторам прибавляется правомерное осуществление работы компании

3) HTTP методы
GET - Используется для получения информации от сервера по заданному URL. 
HEAD - работает также, как и GET, о в ответ сервер присылвает только заголовки и статусную строку без тела HTTP сообщения
POST - Используется для отправки данных на свервер, например, из HTML форм, которые заполняет посетитель сайта
PUT - используется для загрузки содержимого запроса на указанный в этом же запросе URL (заменяет текущие представления ресурса данными запроса)
DELETE - удаляет указанный в URL ресурс
CONNECT - преобразует существующее соединение в тоннель
OPTIONS - используется для получения параметров текущего HTTP соединения
TRACE - создает петлю, благодаря которой клиент может увидеть, что происходит с сообщением на всех узлах передачи

4) HTTP статус коды сервера
1хх - Информационные
2хх - Успех
3хх - Перенаправление
4хх - Клиентские ошибки
5хх - Серверные ошибки

5) Что такое ядро браузера (браузерный джвижок)
Представляет собой программу, преобразующую содержимое веб-страниц (файлы HTML, XML, цифровые изображения и т. д.) 
и информацию о форматировании (в форматах CSS, XSL и т. д.) в интерактивное изображение форматированного содержимого на экране. 

6) Какие браузеры какие ядра используют
WebKit — движок для браузера Apple Safari, включенного в операционную систему Mac OS X, и браузера Google Chrome (до 2013 года).
Blink — движок браузера Chromium, браузера Google Chrome с 28 версии, Microsoft Edge с 79 версии, Opera c 15 версии и Vivaldi. Он является ответвлением WebKit.
Gecko — открытый движок проекта Mozilla; используется в большом числе программ, основанных на коде Mozilla (браузере Firefox, почтовом клиенте Thunderbird, наборе программ SeaMonkey).
KHTML — разработан в рамках проекта KDE, используется в браузере Konqueror и послужил основой для WebKit.

7) Что такое API
API ( Application Programming Interface) - программный интерфейс приложения, с помощью которого одна программа может взаимодействовать с другой.
Позволяет слать информацию из одной программы в другую, минуя интерфейс взаимодействия с пользователем.
API может быть внутренним (частным) - когда программные компоненты связаны между собой и используются внутри системы. 
А может быть открытым (публичным) - в таком случае он позволяет внешним пользователям или другим программам получать информацию, которую можно 
интегрировать в свои приложения.


8. Что такое ендпоинты
URL включает в себя маршрут (основная часть адреса сервиса) и endpoint (часть url, которая содержит например имя вызываемого метода). 
Существует один маршрут и у него несколько эндпоинтов. Т.о. здесь endpoint - это только часть url.

9) URL (URI, URL, URN)
URL - Uniform Resource Locator (унифицированный определитель местонахождения ресурса)определяет местонахождение ресурса в сети и способ его (ресурса) извлечения.
URN - Unifrorm Resource Name (унифицированное имя ресурса) Неизменяемая последовательность символов определяющая только имя некоторого ресурса
URI - Uniform Resource Identifier (унифицированный идентификатор ресурса) обобщенное понятие (множество) идентификации ресурса, включающее в нашем случае как URL, так и URN, как по отдельности, 
      так и совместно. Т.е. мы можем считать, что: URI = URL или URI = URN или URI = URL + URN


10) Идемпотентные HTTP методы
При повторном выполнении результаты ожидаемо одинаковые. GET, HEAD, PUT, DELETE, OPTIONS, TRACE

11) Безопасные HTTP методы
Не меняют данные, можно выполнять их в любой последовательности. К ним относятся GET, HEAD и OPTIONS

12) Идентификация, Аутентификация, Авторизация
Идентификация — процедура, в результате выполнения которой для субъекта идентификации выявляется его идентификатор, однозначно определяющий этого субъекта в информационной системе.
Аутентификация — процедура проверки подлинности, например проверка подлинности пользователя путем сравнения введенного им пароля с паролем, сохраненным в базе данных.
Авторизация — предоставление определенному лицу или группе лиц прав на выполнение определенных действий.

13) Что такое IP
IP-адрес – это уникальный адрес, идентифицирующий устройство в интернете или локальной сети. IP означает «Интернет-протокол» – набор правил, регулирующих формат данных, 
отправляемых через интернет или локальную сеть.
По сути, IP-адрес – это идентификатор, позволяющий передавать информацию между устройствами в сети: он содержит информацию о местоположении устройства и 
обеспечивает его доступность для связи. IP-адреса позволяют различать компьютеры, маршрутизаторы и веб-сайты в интернете и являются важным компонентом работы интернета.

14) Что такое октеты в DNS
 Header - заголовок DNS пакета, состоящий из 12 октет.

15) Что такое порт, сколько портов у Linux сервера
Порт (port) — целое неотрицательное число, записываемое в заголовках протоколов транспортного уровня сетевой модели OSI (TCP, UDP, SCTP, DCCP). 
Модель Open Systems Interconnection (OSI) – это скелет, фундамент и база всех сетевых сущностей. Модель определяет сетевые протоколы, распределяя их на 7 логических уровней.
У Linux сервера 65536 портов  

16) Уровни OSI
7 уровней, которые можно поделить на 2 группы

- Уровни среды (media Layers) - занимаются передачей информации (по кабелю или беспроводной сети), используются сетевыми устройствами, такими как коммутаторы, маршрутизаторы и т.п.:
1. Физический уровень (physical layer)
   Здесь происходит преобразование битов информации в сигналы, которые затем передаются по среде. Используемый физический протокол зависит от того, каким образом компьютер подключен к сети. 
2. Канальный уровень (data link layer)
   Канальный уровень  решает проблему адресации при передаче информации. Получает биты и превращает их в кадры (frame, также «фреймы»). 
   Задача здесь — сформировать кадры с адресом отправителя и получателя, после чего отправить их по сети.
3. Сетевой уровень (network layer)
   отвечает за адресацию пакетов и преобразование логических имен (логических адресов, например, IP-адресов или IPX-адресов) в физические сетевые MAC-адреса (и наоборот). На этом же уровне решается задача  выбора 
   пути (маршрута), по которому пакет доставляется к нужному абоненту (если в сети имеется несколько маршрутов). На сетевом уровне действуют такие сложные промежуточные сетевые устройства, как маршрутизаторы. 

- Уровни хоста (host layers) - используются непосредственно на устройствах, будь то стационарные компьютеры или портативные мобильные устройства:
4. Транспортный уровень (transport layer)
   обеспечивает доставку пакетов в нужной последовательности без потерь и ошибок. Здесь же производится разбивка передаваемых данных на блоки, помещаемые в пакеты, и восстановление принимаемых данных из пакетов.
5. Сеансовый уровень (session layer)
   обеспечивает поддержание сеанса связи, позволяя приложениям взаимодействовать между собой длительное время. Уровень управляет созданием/завершением сеанса, обменом информацией, синхронизацией задач, 
   определением права на передачу данных и поддержанием сеанса в периоды неактивности приложений.	
   
6. Уровень представления (presentation layer)
   определяет и преобразует форматы данных и их синтаксис в форму, приемлемую для передачи по сети, то есть выполняет функцию переводчика. На этом уровне производится шифрование, дешифрирование данных и их сжатие. 
7. Прикладной уровень (application layer)
   Данный уровень описывает взаимосвязь приложений на ПК и внешней сети. Сюда относятся протоколы для просмотра страниц в интернете (HTTPS, HTTP), для работы с почтовыми службами (SMTP, POP3), для передачи файлов (FTP, TFTP) и другие.

    Когда осуществляется передача с верхнего на нижний, это именуется инкапсуляцией данных, а в обратном порядке – декапсуляцией.

17) Хедеры http запросов

Заголовки HTTP являются основной частью HTTP-запросов и ответов, и они несут информацию о браузере клиента, запрошенной странице, сервере и многом другом.